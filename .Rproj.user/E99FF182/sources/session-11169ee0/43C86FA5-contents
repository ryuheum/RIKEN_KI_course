---
title: "RIKEN_KI_course assignment"
author: "Honglian Liu"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.align = "center")
```

# Assignemnt 1

## Task 1 - Literature

### 1. Literature Group 4
Functional annotation of human long noncoding RNAs via molecular phenotyping

### 2. Answer the following questions

#### a. What is the medically relevant insight from the article?
This article did systematic knockdown of 285 lncRNAs in human dermal fibroblasts revealed regulators of cell growth and morphology; CAGE-based molecular phenotypes mirrored the cellular phenotypes. 

The study highlighted functional roles for ZNF213-AS1 and lnc-KHDC3L-2.For ZNF213-AS1, wound-closure (migration) decreased ~40–45% after knockdown, indicating a role in motility/proliferation. Another case study (RP11-398K22.12) showed cis regulation within the same TAD (e.g., KCNQ5), supported by Hi-C and FISH, illustrating potential local regulatory mechanisms relevant to disease loci.

#### b. Which genomics technology/ technologies were used? 
CAGE sequencing (molecular phenotyping), Antisense oligonucleotide (ASO) and siRNA knockdowns (with global concordance assessed), RNA‑seq (subcellular localization), Hi‑C (chromatin context), live‑cell imaging (motility), ATAC-seq (used in locus annotation figures).

### 3. Further related research questions

#### a. List and explain at least three questions/ hypotheses you can think of that extend the analysis presented in the paper. 
1. Cell‑type specificity: LncRNAs may show stronger effects in cell types where they are naturally expressed.  
2. Nuclear mechanism:Chromatin/nuclear lncRNAs respond more strongly to ASO knockdown than siRNA.  
3. Oncogenic role in glioma: Suppressing ZNF213-AS1 in vivo may reduce tumor growth/invasion.

#### b. Computational strategy.
Perform CAGE knockdowns in a relevant cell type; identify DEGs; analyze with GSEA and MARA; compare vs fibroblast data.

## Task 2 - Git repositories and R Markdown

Repository URL: https://github.com/ryuheum/RIKEN_KI_course.git

## Task 3 - Introduction to R and online R course
```{r eval=FALSE}
# Install packages
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}
```

## Task 4 - R basic operations
```{r}
# 1. What is the square root of 10?
sqrt(10)

# 2. What is the logarithm of 32 to the base 2?
log(32, base = 2)

# 3. What is the sum of the numbers from 1 to 1000?
sum(1:1000)

# 4. What is the sum of all even numbers from 2 to 1000?
sum(seq(2, 1000, by = 2))

# 5. How many pairwise comparisons are there for 100 genes?
choose(100, 2)

# 6. And how many ways to arrange 100 genes in triples?
factorial(100) / factorial(100 - 3)
```

## Task 5 - Using R example datasets
```{r}
# 1. Use the R internal CO2 dataset (“data(CO2)”).
data(CO2)
CO2

# 2. Describe briefly the content of the CO2 dataset using the help function.
?CO2 
# Description: The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.

# 3. What is the average and median CO2 uptake of the plants from Quebec and Mississippi?
library(tidyverse)
CO2 %>%
  group_by(Type) %>%
  summarise(
    mean_uptake = mean(uptake, na.rm = TRUE),
    median_uptake = median(uptake, na.rm = TRUE)
  )

# 4. [Optional] In the “airway” example data from Bioconductor, how many genes are expressed in each sample? How many genes are not expressed in any sample?

if (!requireNamespace("airway", quietly = TRUE)) {
  BiocManager::install("airway")
}
library(airway)
data(airway)
genecounts <- assay(airway)

# genes expressed in each sample
colSums(genecounts > 0)

# genes not expressed in any sample
sum(rowSums(genecounts > 0) == 0)

```

## Task 6 - R Functions
```{r}
# 1. Write a function that calculates the ratio of the mean and the median of a given vector. This is a helpful measure to detect data with outlying values. Note: See Reference for R language
mean_median_ratio <- function(x) {
  mean(x) / median(x)
}

# 2. Write a function that ignores the lowest and the highest value from a given vector and calculate the mean.
trimmed_mean <- function(x) {
  x <- sort(x)
  mean(x[2:(length(x)-1)])
}

# 3. Read about piping from here:https://r4ds.had.co.nz/pipes.html#pipes (you don’t have to learn everything, a basic understanding of the usage is enough). Write a short (max. 300 characters, no spaces) explanation of why, how, and when not to use pipes.
# Pipes pass results into the next function to improve readability and flow; use for sequential steps when intermediates aren’t needed; avoid when you must inspect intermediates or control flow is complex.  
# 4. Familiarize yourself with the apply-family of functions (apply, lapply, sapply etc.) http://uc-r.github.io/apply_family Write a short explanation (max. 300 characters, no spaces) of why they could be useful in your work.
# Apply‑family map operations over rows, columns, or lists efficiently, avoiding explicit loops; useful for concise batch computations on large data.
```

## Task 7 - Basic visualization with R
```{r}
#Comment: Files are provided in the shared Google Drive folder under Course week 1. Examples of how to use visualization functions in R and other highly useful information that may aid you during the course can be found here https://biotechnoalchemist.github.io/Teaching2025/ The nummenmaa-package mentioned within the examples can be installed with the code below if you wish to try some of the examples yourself.
# Install remotes
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
library(remotes)
# Install nummenmaa
if (!"nummenmaa" %in% installed.packages()[, "Package"]) {
  install_url("http://emotion.utu.fi/wp-content/uploads/2019/11/nummenmaa_1.0.tar.gz",
              dependencies = TRUE)
}
library(nummenmaa)

# 1. Compare the distributions of the body heights of the two species from the 'magic_guys.csv' dataset graphically 

# Install ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
  install.packages("ggplot2")
}
library(ggplot2)

# Read the dataset
url1 <- "https://raw.githubusercontent.com/ryuheum/RIKEN_KI_course/main/data/magic_guys.csv"
magic_guys <- read.csv(url1)

# Inspect the data
head(magic_guys)
str(magic_guys)

#Seperate species
species1 <- magic_guys$length[magic_guys$species == unique(magic_guys$species)[1]]
species2 <- magic_guys$length[magic_guys$species == unique(magic_guys$species)[2]]

# a.using the basic 'hist' function as well as ‘ggplot’ and ‘geom_histogram’functions from the ggplot2 package. Optimize the plots for example by trying several different 'breaks'. Note that ggplot2-based functions give you many more options for changing the visualization parameters, try some of them. 

# Base R histogram
hist(species1, breaks = 10, col = rgb(1,0,0,0.5), xlim = range(magic_guys$length),
     main = "Body Length Distribution by Species (Base R)", xlab = "Length")
hist(species2, breaks = 12, col = rgb(0,0,1,0.5), add = TRUE)
legend("topright", legend = unique(magic_guys$species), 
       fill = c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)))

# ggplot2 histogram
p_hist <- ggplot(magic_guys, aes(x = length, fill = species)) +
  geom_histogram(position = "identity", alpha = 0.5, bins = 15, color = "black") +
  labs(title = "Body Length Distribution by Species (ggplot2)", x = "Length", y = "Count") +
  theme_minimal()

# b. Do the same comparison as in a. but with boxplots. If you want to use the ggplot2-package, use the functions ‘ggplot’ and ‘geom_boxplot’. 

# Base R boxplot
boxplot(length ~ species, data = magic_guys,
        main = "Body Lengths by Species (Base R)",
        ylab = "Length", col = c("red","blue"))

# ggplot2 boxplot
p_box <- ggplot(magic_guys, aes(x = species, y = length, fill = species)) +
  geom_boxplot() +
  labs(title = "Body Lengths by Species (ggplot2)", x = "Species", y = "Length") +
  theme_minimal()

# c. Save the plots with the ‘png’,‘pdf’, and ‘svg’ formats. In which situation would you use which file format?

# Save ggplots
ggsave("body_length_histogram.png", p_hist, width = 6, height = 4)
ggsave("body_length_histogram.pdf", p_hist, width = 6, height = 4)
ggsave("body_length_histogram.svg", p_hist, width = 6, height = 4)

ggsave("body_length_boxplot.png", p_box, width = 6, height = 4)
ggsave("body_length_boxplot.pdf", p_box, width = 6, height = 4)
ggsave("body_length_boxplot.svg", p_box, width = 6, height = 4)

# PNG: Raster format, good for web and presentations, resolution-dependent. PDF: Vector format, good for publications and printing, scales without loss. SVG: Vector format, ideal for web graphics and interactive visualizations.

# 2. Load the gene expression data matrix from the ‘microarray_data.tab’ dataset provided in the shared folder, it is a big tabular separated matrix.
url2 <- "https://raw.githubusercontent.com/ryuheum/RIKEN_KI_course/main/data/microarray_data.tab"
microarray_data <- read.delim(url2, header = TRUE, sep = "\t", stringsAsFactors = FALSE)

# a. How big is the matrix in terms of rows and columns? 
dim(microarray_data)

# b. Count the missing values per gene and visualize this result.
expr <- microarray_data[ , -1] # Exclude first column(contains geneID)
missing_per_gene <- rowSums(is.na(expr)) # Calculate missing values per gene

# Plot distribution of missing values
library(ggplot2)
library(dplyr)

tibble(missing = missing_per_gene) %>%
  ggplot(aes(x = missing)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Missing Values per Gene",
       x = "Number of missing values",
       y = "Count of genes") +
  theme_minimal()
ggsave("missing_per_gene_ggplot.png", width = 6, height = 4, dpi = 300)

# c. Find the genes for which there are more than X% (X=10%, 20%, 50%) missing values.
total_cols <- ncol(expr) # total number of expression columns
thresholds <- c(0.10, 0.20, 0.50) # thresholds as percentages
# loop through thresholds and count how many genes exceed each
for (x in thresholds) {
  n_genes <- sum(missing_per_gene > total_cols * x)
  cat("Genes with >", x*100, "% missing values:", n_genes, "\n")
}

# d. Replace the missing values by the average expression value for the particular gene. (Note: Imputing data has to be used with caution!)

# Compute row means (ignoring NAs)
row_means <- rowMeans(expr, na.rm = TRUE)

# Replace NA values with the corresponding row mean
expr_imputed <- expr
for (i in seq_len(nrow(expr_imputed))) {
  expr_imputed[i, is.na(expr_imputed[i, ])] <- row_means[i]
}

# Recombine with gene IDs
microarray_imputed <- cbind(microarray_data[1], expr_imputed)
write.table(microarray_imputed, "microarray_imputed.tab",
            sep = "\t", quote = FALSE, row.names = FALSE)

# 3. Visualize the data in the CO2 dataset in a way that gives you a deeper understanding of the data. What do you see?

# Visualize CO2 uptake by Type and Treatment
ggplot(CO2, aes(x = conc, y = uptake, color = Type, linetype = Treatment)) +
  geom_point() +
  geom_line(aes(group = Plant)) +
  labs(title = "CO2 Uptake vs Concentration by Plant Type and Treatment",
       x = "CO2 Concentration", y = "Uptake") +
  theme_minimal()
ggsave("CO2_uptake_plot.png", width = 6, height = 4)

# Boxplot for comparing uptake between Types and Treatments
ggplot(CO2, aes(x = Type, y = uptake, fill = Treatment)) +
  geom_boxplot() +
  labs(title = "Distribution of CO2 Uptake by Type and Treatment",
       x = "Plant Type", y = "CO2 Uptake") +
  theme_minimal()
ggsave("CO2_uptake_boxplot.png", width = 6, height = 4)

# Interpretation
# CO2 Uptake increases with CO₂ concentration, but plateaus at high levels.
# Quebec plants generally show higher uptake than Mississippi.
# Nonchilled plants perform better than chilled, especially at high CO₂.
```
## Task 8
```{r}
# Install Tidybiology
if (!requireNamespace("tidybiology", quietly = TRUE)) {
  if (!requireNamespace("devtools", quietly = TRUE)) {
    install.packages("devtools")
  }
  devtools::install_github("hirscheylab/tidybiology")
}
library(tidybiology)

# a. Extract summary statistics (mean, median and maximum) for the following variables from the ‘chromosome’ data: variations, protein coding genes, and miRNAs. Utilize the tidyverse functions to make this as simply as possible.
data(chromosome)

# Variables: variations, protein_coding_genes, miRNAs
chromosome %>%
  summarise(
    mean_variations = mean(variations, na.rm = TRUE),
    median_variations = median(variations, na.rm = TRUE),
    max_variations = max(variations, na.rm = TRUE),
    
    mean_protein_genes = mean(protein_codinggenes, na.rm = TRUE),
    median_protein_genes = median(protein_codinggenes, na.rm = TRUE),
    max_protein_genes = max(protein_codinggenes, na.rm = TRUE),
    
    mean_miRNAs = mean(mi_rna, na.rm = TRUE),
    median_miRNAs = median(mi_rna, na.rm = TRUE),
    max_miRNAs = max(mi_rna, na.rm = TRUE)
  )
# b. How does the chromosome size distribute? Plot a graph that helps to visualize this by using ggplot2 package functions.
ggplot(chromosome, aes(x = length_mm)) +
  geom_histogram(binwidth = 50, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Distribution of Chromosome Size", x = "Chromosome Length", y = "Count") +
  theme_minimal()

# c. Does the number of protein coding genes or miRNAs correlate with the length of the chromosome? Make two separate plots to visualize these relationships. 

# Protein coding genes vs chromosome length
ggplot(chromosome, aes(x = length_mm, y = protein_codinggenes)) +
  geom_point(color = "green") +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  labs(title = "Protein Coding Genes vs Chromosome Length",
       x = "Chromosome Length", y = "Protein Coding Genes") +
  theme_minimal()

# miRNAs vs chromosome length
ggplot(chromosome, aes(x = length_mm, y = mi_rna)) +
  geom_point(color = "purple") +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  labs(title = "miRNAs vs Chromosome Length",
       x = "Chromosome Length", y = "miRNAs") +
  theme_minimal()

# d. Calculate the same summary statistics for the ‘proteins’ data variables length and mass. Create a meaningful visualization of the relationship between these two variables by utilizing the ggplot2 package functions. Play with the colors, theme- and other visualization parameters to create a plot that pleases you.

# Summary statistics for length and mass
data(proteins)
proteins %>%
  summarise(
    mean_length = mean(length, na.rm = TRUE),
    median_length = median(length, na.rm = TRUE),
    max_length = max(length, na.rm = TRUE),
    
    mean_mass = mean(mass, na.rm = TRUE),
    median_mass = median(mass, na.rm = TRUE),
    max_mass = max(mass, na.rm = TRUE)
  )

# Visualization of length vs mass
ggplot(proteins, aes(x = length, y = mass)) +
  geom_point(size = 3, alpha = 0.8, color = "blue") +
  labs(title = "Protein Length vs Mass", x = "Length", y = "Mass") +
  theme_minimal()
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
